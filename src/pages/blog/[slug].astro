---
import { getCollection } from "astro:content";
import BaseLayout from "../../layouts/BaseLayout.astro";
import formatDate from "../../../utils/formatDate";

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const blogEntries = await getCollection("posts");
  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}
// 2. When it's time to render, you can get the entry directly from the prop
const { entry } = Astro.props;
const { Content } = await entry.render();
const { pubDate, coverImage, coverImageAlt, tags, draft } = entry.data;
const tagList = tags?.join(", ");
---

<BaseLayout pageTitle={entry.data.title} customClass="justify-center">
  <article class="prose font-sans">
    <aside class="mb-8">
      {
        draft && (
          <div class="w-full border-2 p-2 my-2 border-yellow-500 bg-yellow-100">
            <h3>
              üö®<span class="font-bold text-yellow-900">FYI: </span>This is an
              unpublished draft ‚ö†Ô∏è
            </h3>
            <p>
              It won't show up on the{" "}
              <a href="/blog" class="font-bold underline">
                blog page
              </a>{" "}
              or in lists of recent posts but it will show up at this direct
              link or at{" "}
              <a href="/blog/drafts" class="font-bold underline">
                the dedicated drafts directory
              </a>
            </p>
          </div>
        )
      }
      <h1 class="mb-2 font-bold text-4xl">{entry.data.title}</h1>
      {
        pubDate && (
          <div class="italic">
            <span>Posted:</span>
            <time datetime={pubDate}>{formatDate(pubDate)}</time>
          </div>
        )
      }
      {
        coverImage && coverImageAlt && (
          <img src={coverImage} alt={coverImageAlt} />
        )
      }
    </aside>
    <Content />
    <aside class="mt-8">
      {
        tags && (
          <div class="italic">
            <span class="font-bold">Other posts about: </span>
            <ul class="list-none list-outside m-0 p-0 flex flex-row">
              {tagList
                .split(",")
                .map((tag: string, idx: number, tagList: string[]) => (
                  <li class="mr-2 first:mx-0 first:mr-2 p-0">
                    <a
                      href={`/blog/tags/${tag.trim()}`}
                      aria-label={`Pages tagged ${tag}`}
                    >
                      {tag}
                    </a>
                    {idx !== tagList.length - 1 && (
                      <span class="ml-2"> ~ </span>
                    )}
                  </li>
                ))}
            </ul>
          </div>
        )
      }
    </aside>
  </article>
</BaseLayout>
